/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { TestCallbackValidation } from "../TestCallbackValidation";

export class TestCallbackValidation__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<TestCallbackValidation> {
    return super.deploy(overrides || {}) as Promise<TestCallbackValidation>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestCallbackValidation {
    return super.attach(address) as TestCallbackValidation;
  }
  connect(signer: Signer): TestCallbackValidation__factory {
    return super.connect(signer) as TestCallbackValidation__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestCallbackValidation {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestCallbackValidation;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "poolDeployer",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24",
      },
    ],
    name: "verifyCallback",
    outputs: [
      {
        internalType: "contract ISkyXV3Pool",
        name: "pool",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102a5806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638bdb192514610030575b600080fd5b6100726004803603608081101561004657600080fd5b5080356001600160a01b03908116916020810135821691604082013516906060013562ffffff1661008e565b604080516001600160a01b039092168252519081900360200190f35b600061009c858585856100a5565b95945050505050565b600061009c856100b68686866100bb565b610111565b6100c361024f565b826001600160a01b0316846001600160a01b031611156100e1579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b600061011d838361016b565b9050336001600160a01b03821614610165576040805162461bcd60e51b815260206004808301919091526024820152631413d3d360e21b604482015290519081900360640190fd5b92915050565b600081602001516001600160a01b031682600001516001600160a01b03161061019357600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301206001600160f81b031960a085015294901b6bffffffffffffffffffffffff191660a183015260b58201939093527f1b5c366cb0b7109926c0b161c0a85469fa485e75389d33a4dd753c35b22f157b60d5808301919091528251808303909101815260f5909101909152805191012090565b60408051606081018252600080825260208201819052918101919091529056fea2646970667358221220eb464e2f72c1e5de921c498d6f990cbbd7f1b5e808a2f488f509dcb2bfd8a7e964736f6c63430007060033";
